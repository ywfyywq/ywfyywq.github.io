---
layout: post
title: Git从入门到精通（一）
date: 2018-09-16
comments: true 
tags: 学习笔记 工程管理 Git
summary: 本章从介绍有关版本控制工具的一些背景知识开始，最后是关于如何设置 Git 开始你的工作。 通过本章的学习，你应该了解为什么 Git 这么流行，为什么你应该使用 Git 以及你应该如何设置以便使用 Git。
---


### 关于版本控制
* **本地版本控制系统（Version Control Systems，简称VCS）**

原理：**采用某种简单的数据库来记录文件的历次差异。**

例子：RCS(Revision Control System)

图解：

![本地版本控制][RCS]

问题：不同系统的开发者不能协同工作。

* **集中化的版本控制（Centralized Version Control Systems，简称CVCS）**

原理：**在VCS的基础上，把差异文件上传到集中管理的服务器，从而进行协同开发**

例子：CVS、Subversion等

图解：

![集中化的版本控制][CVCS]

问题：单点故障。

* **分布式控制系统（Distributed Version Control System，简称 DVCS）**

原理：**客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来**

例子：Git

图解：

![分布式控制系统][DVCS]

### Git基础

* **直接记录快照，而非差异比较**

CVS、Subversion等将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。

Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。

![差异比较][DIFF]


* **几乎所有操作都是本地执行**

在 Git 中的绝大多数操作都只需要访问本地文件和资源， 因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。

* **Git保证完整性**

Git中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在Git不知情时更改任何文件内容或目录内容。

Git用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于Git中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：

> 24b9da6552252987aa493b52f8696cd6d3b00373


* **Git一般只添加数据**

* **三种状态**

Git有三种状态：

1. 已提交（committed）：表示数据已经安全的保存在本地数据库中
2. 已修改（modified）：表示修改了文件，但还没保存到数据库中
3. 已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

三个工作区域
1. Git仓库（Git Repository）：用来保存项目的元数据和对象数据库的地方
2. 工作目录（Working Directory）：对项目的某个版本独立提取出来的内容
3. 暂存区域（Staging Area）：暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作'索引'，不过一般说法还是叫暂存区域。

![工作区域][AREAS]

Git工作流程：

1. 在工作目录中修改文件
2. 暂存文件，将文件的快照放入暂存区域
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录

### 初次运行 Git 前的配置

Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量

1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的git config 时，它会从此文件读写配置变量。
2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git读写此文件。
3. 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。

每一个级别覆盖上一级别的配置。在 Windows 系统中，Git 会查找 \$HOME 目录下（一般情况下是 C:\\Users\\\$USER）的 .gitconfig 文件。

* **用户信息**

        $ git config --global user.name "John Doe"
	
	    $ git config --global user.email johndoe@example.com

* **默认文本编辑器**

        $ git config --global core.editor emacs
	
* **检查配置信息**

        $ git config --list
	
你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。

你可以通过输入 `git config <key>`： 来检查 Git 的某一项配置。

        $ git config user.name
	
* **获取帮助**

        $ git help <verb>
        $ git <verb> --help
        $ man git-<verb>
	
[RCS]: /images/blog/ProGit/1/RCS.jpg
[CVCS]: /images/blog/ProGit/1/CVCS.jpg
[DVCS]: /images/blog/ProGit/1/DVCS.jpg
[DIFF]: /images/blog/ProGit/1/DIFF.jpg
[AREAS]: /images/blog/ProGit/1/AREAS.png
