---
layout: post
title: REST实战
date: 2018-11-20
comments: true 
tags: 学习笔记
summary: 揭开WEB作为一个应用平台的神秘面纱，以及展示如何将WEB架构应用于常见的企业计算问题。帮助大家建造一个可以由其它系统使用的开放的信息平台，它避开集成，而支持组合，但仍然实现了有价值的业务行为。这是一个分布式的、超媒体驱动的应用平台。
---
### 将Web作为建造分布式系统的平台

* 从资源的角度思考

要使用一个资源，我们需要能够在网络上标识它，还需要有一些手段来操作它。标识资源的就被称作标识符。

Web上用来称呼标识符的术语：

| 术语 | 注释 |
| ------ | ------ | ------ |
| URI(Uniform Resource Identifier | 常被误认为Universal或者Unique |
| IRI(International Resource Identifier | URI的升级版，允许使用国际字符方案 |
| URN(Uniform Resource Name | 这是一个URI，使用"urn"作为方案，用来在一个特殊的"命名空间"中表达唯一的名字 |
| URL(Uniform Resource Locator | 这是一个URI，用来表示关于与所标识的资源交互的方式的信息。这个术语现在已经过时了，因为并非所有的URI都需要表达特定的交互协议的信息 |
| 地址 | 很多人认为资源在WEB上有地址，作为结果，说的其实就是资源的标识符 |

* 资源表述

Web是无处不在的，HTTP这个URI方案今天甚至成为了“标识”和“地址”的同义词。

资源必须至少有一个标识符，以便于在Web上寻址，每个标识符与一个或多个表述相关联。一个表述，指的是某个资源在某特定的时刻的状态的转化形式或者视图。这个视图被编码为一种或多种可转移的格式，例如XHTML、Atom、XML、JSON，甚至是纯文本、逗号分隔的值（CSV）、MP3或者JPEG。

* 表述格式和URI

有一个误解是，每一个不同的资源表述都需要有自己的URI。使用内容协商机制，消费者能够就特定的表述格式进行协商。他们通过将HTTP的Accept请求头信息与一系列他们喜欢处理的媒体类型组装在一起来做到这件事情。

* 通信的艺术

HTTP所支持的动词的集合——GET、POST、PUT、DELETE、OPTIONS、HEAD、TRACE、CONNECT以及PATCH——构成了一个足够通用的协议，可以支持广泛的解决方案。

除了动词外，HTTP也定义了一个响应代码的集合（例如200 OK，201 Created以及404Not Found），来协调由动词所引起的交互。

* 从Web架构到REST架构风格

使用有限的一组操作和统一的语义来建造一种到处存在的基础架构，能够支持任何类型的应用。这种架构风格被称为“表述性状态转移”（REpresentational State Transfer）。REST描述了Web作为一个分布式超媒体的应用，相互链接的资源通过交换资源状态的表述来进行通信。

* 超媒体

在一个超媒体系统中，应用状态通过唯一可标识的资源的表述来表达。应用能够执行的迁移状态的标识符是以链接的形式内嵌在当前状态的表述之中的。

简单来说，这就是著名的“将超媒体作为状态的引擎（hypermedia as the engine of application state，缩写为HATEOAS）

* Richardson的成熟度模型

![Richardson的成熟度模型][Richardson]

[Richardson]: /images/blog/REST/Richardson.png

零级服务：服务成熟度中最基本的一级，其特征为那些服务有单个的URI，并且使用单个的HTTP方法（通常是POST）。

一级服务：服务成熟度的下一级别使用了很多URI，但是只使用单个的HTTP动词。

二级服务：二级服务使用了大量的可通过URI寻址的资源。这样的服务支持多个HTTP动词来暴露资源。包含在这个级别的是CRUD服务。

三级服务：最Web感知的服务级别，支持超媒体作为应用状态的引擎的观念。即，表述包含了消费者可能感兴趣的到其他资源的URI链接。这种服务通过追踪资源来引导消费者，结果是引起应用状态的迁移。


### Restbucks：一家有着全球抱负的小咖啡店

![HTTP远程过程调用的架构][SimpleHTTPArchitecture]

[SimpleHTTPArchitecture]: /images/blog/REST/SimpleHTTPArchitecture.png

* URI模板

在分布式系统中，服务提供者经常会提供机器可以阅读的元数据，描述客户应该如何与服务进行绑定和交互，例如，一般会用到接口定义语言(IDL)，例如WS-*Web服务中的Web服务描述语言（WSDL），实现CORBA系统时则是使用CORBA-IDL。对于WEB来说，会使用各种各样的元数据技术来描述服务契约，包括URI模板，它描述一个服务所支持的那组URI的句法模式。

例如：http://restbucks.com/order/{order_id}

* URI隧道技术

URI隧道技术是将URI作为跨越系统边界转移信息的一种方式来使用，其做法是将信息编码到URI内部。

将方法调用映射到URI：

![将方法调用映射到URI][URIMapping]

[URIMapping]: /images/blog/REST/URIMapping.png

URI隧道技术的HTTP请求/响应:

![URI隧道技术的HTTP请求/响应][ResponseForURITunnel]

[ResponseForURITunnel]: /images/blog/REST/ResponseForURITunnel.png

从URI中提取业务对象：

{% highlight cs %}
public void ProcessPost(HttpListenerContext context)
{
	// Parse the URI
	Order order = ParseUriForOrderDetails(context.Request.QueryString);
	string response = string.Empty;
	if (order != null)
	{
		// Process the order by calling the mapped method
		var orderConfirmation = RestbucksService.PlaceOrder(order);
		response = "OrderId=" + orderConfirmation.OrderId.ToString();
	}
	else
	{
		response = ″Failure: Could not place order.″;
	}
	// Write to the response stream
	using (var sw = new StreamWriter(context.Response.OutputStream))
	{
		sw.Write(response);
	}
}
{% endhighlight %}


URI技术的客户端：

{% highlight cs %}
public OrderConfirmation PlaceOrder(Order order)
{
	// Create the URI
	var sb = new StringBuilder(″http://restbucks.com/PlaceOrder?″);
	sb.AppendFormat(″coffee={0}″, order.Coffee.ToString());
	sb.AppendFormat(″&size={0}″, order.Size.ToString());
	sb.AppendFormat(″&milk={0}″, order.Milk.ToString());
	sb.AppendFormat(″&location={0}″, order.ConsumeLocation.ToString());
	// Set up the POST request
	var request = HttpRequest.Create(sb.ToString()) as HttpWebRequest;
	request.Method = ″POST″;
	// Send the POST request
	var response = request.GetResponse();
	// Read the contents of the response
	OrderConfirmation orderConfirmation = null;
	using (var sr = new StreamReader(response.GetResponseStream()))
	{
		var str = sr.ReadToEnd();
		// Create an OrderConfirmation object from the response
		orderConfirmation = new OrderConfirmation(str);
	}
	return orderConfirmation;
}
{% endhighlight %}

使用URI隧道技术的服务在Richardson成熟度模型中被划分为一级服务。这类服务中URI是一个关键的概念，但是却不授受任何其他的WEB技术。HTTP也只被用作在WEB中移动URI的传输协议。

* POX：基于HTTP之上的普通老式XML

URI隧道技术使用地址来传递业务意图，第二种基于WEB的轻量级集成方法使用消息进行传递，如普通老式XML（Plain Old XML）, POX。

用XML和HTTP进行远程过程调用：

![用XML和HTTP进行远程过程调用][POXInteraction]

[POXInteraction]: /images/blog/REST/POXInteraction.png

1. POX调用始于客户系统中的一个对象调用一个分发器，该分发器为远程Restbucks服务展现一个本地接口。
2. 分发器将它从应用级对象所接受到的值转换成一个XML文档，然后调用一个HTTP客户端库来将信息传递到网络上。
3. HTTP客户端将分发器的XML载荷POST到远程服务。
4. 包含订购服务的WEB服务器接受进来的POST请求，并将请求的内容传给服务器端 的分发器。
5. 服务器端的分发器将XML文档翻译成Restbucks服务中的某个对象上的一个本地方法调用。
6. 当这个方法调用返回时，任何返回值都会被传给分发器。
7. 分发器使用返回值创建一个XML文档，并将它传回WEB服务器。
8. 